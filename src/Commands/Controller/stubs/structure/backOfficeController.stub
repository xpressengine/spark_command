<?php

namespace {{targetNamespace}};

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Xpressengine\Http\Request;
use Throwable;
use XePresenter;

/**
 * Class {{targetClassName}}
 *
 * @package {{targetNamespace}}
 */
class {{targetClassName}} extends Controller
{
    /**
     * @param Request $request
     * @return mixed
     */
    public function index(
        Request            $request
    )
    {
        $pageTitle = '';
        $viewPath = '{{pluginId}}::views.backOffice.{{camelCaseName}}.index';

        return XePresenter::make($viewPath, [
            'pageTitle' => $pageTitle
        ]);
    }

    /**
     * @return mixed
     */
    public function create(
    )
    {
        $pageTitle = '';
        $viewPath = '{{pluginId}}::views.backOffice.{{camelCaseName}}.create';

        return XePresenter::make($viewPath, [
            'pageTitle' => $pageTitle,
        ]);
    }

    /**
     * @param Request $request
     * @return RedirectResponse
     * @throws Throwable
     */
    public function store(
        Request               $request
    ): RedirectResponse
    {
        \XeDB::beginTransaction();

        try {
            $inputs = $request->all();
            \XeDB::commit();
        } catch (Throwable $e) {
            \XeDB::rollBack();
            throw $e;
        }

        $redirectUrl = route('{{pluginId}}::backOffice.{{camelCaseName}}.index');
        return redirect()->to($redirectUrl);
    }

    /**
     * @param $id
     * @return mixed
     */
    public function show($id)
    {
        $pageTitle = '';
        $viewPath = '{{pluginId}}::views.backOffice.{{camelCaseName}}.show';

        $redirectUrl = redirect()->back()->getTargetUrl();

        return XePresenter::make($viewPath, [
            'pageTitle' => $pageTitle,
            'redirectUrl' => $redirectUrl,
        ]);
    }

    /**
     * @param $id
     * @return mixed
     */
    public function edit($id)
    {
        $pageTitle = '';
        $viewPath = '{{pluginId}}::views.backOffice.{{camelCaseName}}.edit';

        return XePresenter::make($viewPath, [
            'pageTitle' => $pageTitle,
        ]);
    }

    /**
     * @param Request $request
     * @param $id
     * @return RedirectResponse
     * @throws Throwable
     */
    public function update(
        Request               $request,
        $id
    ): RedirectResponse
    {
        \XeDB::beginTransaction();

        try {
            $inputs = array_filter($request->all());
            \XeDB::commit();
        } catch (Throwable $e) {
            \XeDB::rollBack();
            throw $e;
        }

        return redirect()->back();
    }

    /**
     * @param $id
     * @return mixed
     * @throws Throwable
     */
    public function delete($id)
    {
        \XeDB::beginTransaction();

        try {
            \XeDB::commit();
        } catch (Throwable $e) {
            \XeDB::rollBack();
            throw $e;
        }

        return XePresenter::makeApi([]);
    }

    /**
     * @param Request $request
     * @return RedirectResponse
     * @throws Throwable
     */
    public function deleteBatch(
        Request            $request
    ): RedirectResponse
    {
        \XeDB::beginTransaction();

        try {
            \XeDB::commit();
        } catch (Throwable $e) {
            \XeDB::rollBack();
            throw $e;
        }

        return redirect()->back();
    }

    /**
     * @param $id
     * @return mixed
     * @throws Throwable
     */
    public function replicate($id)
    {
        \XeDB::beginTransaction();

        try {
            \XeDB::commit();
        } catch (Throwable $e) {
            \XeDB::rollBack();
            throw $e;
        }

        return XePresenter::makeApi([]);
    }

    /**
     * @param Request $request
     * @return RedirectResponse
     * @throws Throwable
     */
    public function replicateBatch(
        Request            $request
    ): RedirectResponse
    {
        \XeDB::beginTransaction();

        try {
            \XeDB::commit();
        } catch (Throwable $e) {
            \XeDB::rollBack();
            throw $e;
        }

        return redirect()->back();
    }
}